// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.2
//   protoc               v5.28.0
// source: swisstronik/compliance/tx.proto

/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
import { IssuerDetails } from "./entities";

export const protobufPackage = "swisstronik.compliance";

export interface MsgAddOperator {
  signer: string;
  operator: string;
}

export interface MsgAddOperatorResponse {
}

export interface MsgRemoveOperator {
  signer: string;
  operator: string;
}

export interface MsgRemoveOperatorResponse {
}

export interface MsgSetVerificationStatus {
  /** operator */
  signer: string;
  /** issuer address to set verification status */
  issuerAddress: string;
  /** true if verified */
  isVerified: boolean;
}

export interface MsgSetVerificationStatusResponse {
}

export interface MsgCreateIssuer {
  signer: string;
  issuer: string;
  details?: IssuerDetails | undefined;
}

export interface MsgCreateIssuerResponse {
}

export interface MsgUpdateIssuerDetails {
  signer: string;
  issuer: string;
  details?: IssuerDetails | undefined;
}

export interface MsgUpdateIssuerDetailsResponse {
}

export interface MsgRemoveIssuer {
  signer: string;
  issuer: string;
}

export interface MsgRemoveIssuerResponse {
}

export interface MsgRevokeVerification {
  signer: string;
  verificationId: Uint8Array;
}

export interface MsgRevokeVerificationResponse {
}

export interface MsgAttachHolderPublicKey {
  signer: string;
  holderPublicKey: Uint8Array;
}

export interface MsgAttachHolderPublicKeyResponse {
}

export interface MsgConvertCredential {
  signer: string;
  verificationId: Uint8Array;
}

export interface MsgConvertCredentialResponse {
}

/** VerifyIssuerProposal is a gov Content type to verify issuer */
export interface VerifyIssuerProposal {
  /** title of the proposal */
  title: string;
  /** description of the proposal */
  description: string;
  /** an address of issuer to verify */
  issuerAddress: string;
}

function createBaseMsgAddOperator(): MsgAddOperator {
  return { signer: "", operator: "" };
}

export const MsgAddOperator = {
  encode(message: MsgAddOperator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.operator !== "") {
      writer.uint32(18).string(message.operator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddOperator {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddOperator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddOperator {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      operator: isSet(object.operator) ? globalThis.String(object.operator) : "",
    };
  },

  toJSON(message: MsgAddOperator): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.operator !== "") {
      obj.operator = message.operator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddOperator>, I>>(base?: I): MsgAddOperator {
    return MsgAddOperator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddOperator>, I>>(object: I): MsgAddOperator {
    const message = createBaseMsgAddOperator();
    message.signer = object.signer ?? "";
    message.operator = object.operator ?? "";
    return message;
  },
};

function createBaseMsgAddOperatorResponse(): MsgAddOperatorResponse {
  return {};
}

export const MsgAddOperatorResponse = {
  encode(_: MsgAddOperatorResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAddOperatorResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddOperatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAddOperatorResponse {
    return {};
  },

  toJSON(_: MsgAddOperatorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddOperatorResponse>, I>>(base?: I): MsgAddOperatorResponse {
    return MsgAddOperatorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddOperatorResponse>, I>>(_: I): MsgAddOperatorResponse {
    const message = createBaseMsgAddOperatorResponse();
    return message;
  },
};

function createBaseMsgRemoveOperator(): MsgRemoveOperator {
  return { signer: "", operator: "" };
}

export const MsgRemoveOperator = {
  encode(message: MsgRemoveOperator, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.operator !== "") {
      writer.uint32(18).string(message.operator);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveOperator {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveOperator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.operator = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveOperator {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      operator: isSet(object.operator) ? globalThis.String(object.operator) : "",
    };
  },

  toJSON(message: MsgRemoveOperator): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.operator !== "") {
      obj.operator = message.operator;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveOperator>, I>>(base?: I): MsgRemoveOperator {
    return MsgRemoveOperator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveOperator>, I>>(object: I): MsgRemoveOperator {
    const message = createBaseMsgRemoveOperator();
    message.signer = object.signer ?? "";
    message.operator = object.operator ?? "";
    return message;
  },
};

function createBaseMsgRemoveOperatorResponse(): MsgRemoveOperatorResponse {
  return {};
}

export const MsgRemoveOperatorResponse = {
  encode(_: MsgRemoveOperatorResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveOperatorResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveOperatorResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveOperatorResponse {
    return {};
  },

  toJSON(_: MsgRemoveOperatorResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveOperatorResponse>, I>>(base?: I): MsgRemoveOperatorResponse {
    return MsgRemoveOperatorResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveOperatorResponse>, I>>(_: I): MsgRemoveOperatorResponse {
    const message = createBaseMsgRemoveOperatorResponse();
    return message;
  },
};

function createBaseMsgSetVerificationStatus(): MsgSetVerificationStatus {
  return { signer: "", issuerAddress: "", isVerified: false };
}

export const MsgSetVerificationStatus = {
  encode(message: MsgSetVerificationStatus, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.issuerAddress !== "") {
      writer.uint32(18).string(message.issuerAddress);
    }
    if (message.isVerified !== false) {
      writer.uint32(24).bool(message.isVerified);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetVerificationStatus {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetVerificationStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuerAddress = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.isVerified = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgSetVerificationStatus {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      issuerAddress: isSet(object.issuerAddress) ? globalThis.String(object.issuerAddress) : "",
      isVerified: isSet(object.isVerified) ? globalThis.Boolean(object.isVerified) : false,
    };
  },

  toJSON(message: MsgSetVerificationStatus): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.issuerAddress !== "") {
      obj.issuerAddress = message.issuerAddress;
    }
    if (message.isVerified !== false) {
      obj.isVerified = message.isVerified;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetVerificationStatus>, I>>(base?: I): MsgSetVerificationStatus {
    return MsgSetVerificationStatus.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetVerificationStatus>, I>>(object: I): MsgSetVerificationStatus {
    const message = createBaseMsgSetVerificationStatus();
    message.signer = object.signer ?? "";
    message.issuerAddress = object.issuerAddress ?? "";
    message.isVerified = object.isVerified ?? false;
    return message;
  },
};

function createBaseMsgSetVerificationStatusResponse(): MsgSetVerificationStatusResponse {
  return {};
}

export const MsgSetVerificationStatusResponse = {
  encode(_: MsgSetVerificationStatusResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgSetVerificationStatusResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgSetVerificationStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgSetVerificationStatusResponse {
    return {};
  },

  toJSON(_: MsgSetVerificationStatusResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgSetVerificationStatusResponse>, I>>(
    base?: I,
  ): MsgSetVerificationStatusResponse {
    return MsgSetVerificationStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgSetVerificationStatusResponse>, I>>(
    _: I,
  ): MsgSetVerificationStatusResponse {
    const message = createBaseMsgSetVerificationStatusResponse();
    return message;
  },
};

function createBaseMsgCreateIssuer(): MsgCreateIssuer {
  return { signer: "", issuer: "", details: undefined };
}

export const MsgCreateIssuer = {
  encode(message: MsgCreateIssuer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.details !== undefined) {
      IssuerDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateIssuer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateIssuer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = IssuerDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateIssuer {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      details: isSet(object.details) ? IssuerDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: MsgCreateIssuer): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.details !== undefined) {
      obj.details = IssuerDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateIssuer>, I>>(base?: I): MsgCreateIssuer {
    return MsgCreateIssuer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateIssuer>, I>>(object: I): MsgCreateIssuer {
    const message = createBaseMsgCreateIssuer();
    message.signer = object.signer ?? "";
    message.issuer = object.issuer ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? IssuerDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseMsgCreateIssuerResponse(): MsgCreateIssuerResponse {
  return {};
}

export const MsgCreateIssuerResponse = {
  encode(_: MsgCreateIssuerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgCreateIssuerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateIssuerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgCreateIssuerResponse {
    return {};
  },

  toJSON(_: MsgCreateIssuerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateIssuerResponse>, I>>(base?: I): MsgCreateIssuerResponse {
    return MsgCreateIssuerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateIssuerResponse>, I>>(_: I): MsgCreateIssuerResponse {
    const message = createBaseMsgCreateIssuerResponse();
    return message;
  },
};

function createBaseMsgUpdateIssuerDetails(): MsgUpdateIssuerDetails {
  return { signer: "", issuer: "", details: undefined };
}

export const MsgUpdateIssuerDetails = {
  encode(message: MsgUpdateIssuerDetails, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    if (message.details !== undefined) {
      IssuerDetails.encode(message.details, writer.uint32(26).fork()).ldelim();
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateIssuerDetails {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateIssuerDetails();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.details = IssuerDetails.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateIssuerDetails {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
      details: isSet(object.details) ? IssuerDetails.fromJSON(object.details) : undefined,
    };
  },

  toJSON(message: MsgUpdateIssuerDetails): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    if (message.details !== undefined) {
      obj.details = IssuerDetails.toJSON(message.details);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateIssuerDetails>, I>>(base?: I): MsgUpdateIssuerDetails {
    return MsgUpdateIssuerDetails.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateIssuerDetails>, I>>(object: I): MsgUpdateIssuerDetails {
    const message = createBaseMsgUpdateIssuerDetails();
    message.signer = object.signer ?? "";
    message.issuer = object.issuer ?? "";
    message.details = (object.details !== undefined && object.details !== null)
      ? IssuerDetails.fromPartial(object.details)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateIssuerDetailsResponse(): MsgUpdateIssuerDetailsResponse {
  return {};
}

export const MsgUpdateIssuerDetailsResponse = {
  encode(_: MsgUpdateIssuerDetailsResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgUpdateIssuerDetailsResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateIssuerDetailsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateIssuerDetailsResponse {
    return {};
  },

  toJSON(_: MsgUpdateIssuerDetailsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateIssuerDetailsResponse>, I>>(base?: I): MsgUpdateIssuerDetailsResponse {
    return MsgUpdateIssuerDetailsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateIssuerDetailsResponse>, I>>(_: I): MsgUpdateIssuerDetailsResponse {
    const message = createBaseMsgUpdateIssuerDetailsResponse();
    return message;
  },
};

function createBaseMsgRemoveIssuer(): MsgRemoveIssuer {
  return { signer: "", issuer: "" };
}

export const MsgRemoveIssuer = {
  encode(message: MsgRemoveIssuer, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.issuer !== "") {
      writer.uint32(18).string(message.issuer);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveIssuer {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveIssuer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.issuer = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRemoveIssuer {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      issuer: isSet(object.issuer) ? globalThis.String(object.issuer) : "",
    };
  },

  toJSON(message: MsgRemoveIssuer): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.issuer !== "") {
      obj.issuer = message.issuer;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveIssuer>, I>>(base?: I): MsgRemoveIssuer {
    return MsgRemoveIssuer.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveIssuer>, I>>(object: I): MsgRemoveIssuer {
    const message = createBaseMsgRemoveIssuer();
    message.signer = object.signer ?? "";
    message.issuer = object.issuer ?? "";
    return message;
  },
};

function createBaseMsgRemoveIssuerResponse(): MsgRemoveIssuerResponse {
  return {};
}

export const MsgRemoveIssuerResponse = {
  encode(_: MsgRemoveIssuerResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRemoveIssuerResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRemoveIssuerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRemoveIssuerResponse {
    return {};
  },

  toJSON(_: MsgRemoveIssuerResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRemoveIssuerResponse>, I>>(base?: I): MsgRemoveIssuerResponse {
    return MsgRemoveIssuerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRemoveIssuerResponse>, I>>(_: I): MsgRemoveIssuerResponse {
    const message = createBaseMsgRemoveIssuerResponse();
    return message;
  },
};

function createBaseMsgRevokeVerification(): MsgRevokeVerification {
  return { signer: "", verificationId: new Uint8Array(0) };
}

export const MsgRevokeVerification = {
  encode(message: MsgRevokeVerification, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.verificationId.length !== 0) {
      writer.uint32(18).bytes(message.verificationId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevokeVerification {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeVerification();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.verificationId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRevokeVerification {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      verificationId: isSet(object.verificationId) ? bytesFromBase64(object.verificationId) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgRevokeVerification): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.verificationId.length !== 0) {
      obj.verificationId = base64FromBytes(message.verificationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRevokeVerification>, I>>(base?: I): MsgRevokeVerification {
    return MsgRevokeVerification.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRevokeVerification>, I>>(object: I): MsgRevokeVerification {
    const message = createBaseMsgRevokeVerification();
    message.signer = object.signer ?? "";
    message.verificationId = object.verificationId ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgRevokeVerificationResponse(): MsgRevokeVerificationResponse {
  return {};
}

export const MsgRevokeVerificationResponse = {
  encode(_: MsgRevokeVerificationResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgRevokeVerificationResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevokeVerificationResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRevokeVerificationResponse {
    return {};
  },

  toJSON(_: MsgRevokeVerificationResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRevokeVerificationResponse>, I>>(base?: I): MsgRevokeVerificationResponse {
    return MsgRevokeVerificationResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRevokeVerificationResponse>, I>>(_: I): MsgRevokeVerificationResponse {
    const message = createBaseMsgRevokeVerificationResponse();
    return message;
  },
};

function createBaseMsgAttachHolderPublicKey(): MsgAttachHolderPublicKey {
  return { signer: "", holderPublicKey: new Uint8Array(0) };
}

export const MsgAttachHolderPublicKey = {
  encode(message: MsgAttachHolderPublicKey, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.holderPublicKey.length !== 0) {
      writer.uint32(18).bytes(message.holderPublicKey);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAttachHolderPublicKey {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAttachHolderPublicKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.holderPublicKey = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAttachHolderPublicKey {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      holderPublicKey: isSet(object.holderPublicKey) ? bytesFromBase64(object.holderPublicKey) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgAttachHolderPublicKey): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.holderPublicKey.length !== 0) {
      obj.holderPublicKey = base64FromBytes(message.holderPublicKey);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAttachHolderPublicKey>, I>>(base?: I): MsgAttachHolderPublicKey {
    return MsgAttachHolderPublicKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAttachHolderPublicKey>, I>>(object: I): MsgAttachHolderPublicKey {
    const message = createBaseMsgAttachHolderPublicKey();
    message.signer = object.signer ?? "";
    message.holderPublicKey = object.holderPublicKey ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgAttachHolderPublicKeyResponse(): MsgAttachHolderPublicKeyResponse {
  return {};
}

export const MsgAttachHolderPublicKeyResponse = {
  encode(_: MsgAttachHolderPublicKeyResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgAttachHolderPublicKeyResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAttachHolderPublicKeyResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgAttachHolderPublicKeyResponse {
    return {};
  },

  toJSON(_: MsgAttachHolderPublicKeyResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAttachHolderPublicKeyResponse>, I>>(
    base?: I,
  ): MsgAttachHolderPublicKeyResponse {
    return MsgAttachHolderPublicKeyResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAttachHolderPublicKeyResponse>, I>>(
    _: I,
  ): MsgAttachHolderPublicKeyResponse {
    const message = createBaseMsgAttachHolderPublicKeyResponse();
    return message;
  },
};

function createBaseMsgConvertCredential(): MsgConvertCredential {
  return { signer: "", verificationId: new Uint8Array(0) };
}

export const MsgConvertCredential = {
  encode(message: MsgConvertCredential, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.verificationId.length !== 0) {
      writer.uint32(18).bytes(message.verificationId);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertCredential {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConvertCredential();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.verificationId = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgConvertCredential {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      verificationId: isSet(object.verificationId) ? bytesFromBase64(object.verificationId) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgConvertCredential): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.verificationId.length !== 0) {
      obj.verificationId = base64FromBytes(message.verificationId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConvertCredential>, I>>(base?: I): MsgConvertCredential {
    return MsgConvertCredential.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConvertCredential>, I>>(object: I): MsgConvertCredential {
    const message = createBaseMsgConvertCredential();
    message.signer = object.signer ?? "";
    message.verificationId = object.verificationId ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgConvertCredentialResponse(): MsgConvertCredentialResponse {
  return {};
}

export const MsgConvertCredentialResponse = {
  encode(_: MsgConvertCredentialResponse, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): MsgConvertCredentialResponse {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgConvertCredentialResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgConvertCredentialResponse {
    return {};
  },

  toJSON(_: MsgConvertCredentialResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgConvertCredentialResponse>, I>>(base?: I): MsgConvertCredentialResponse {
    return MsgConvertCredentialResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgConvertCredentialResponse>, I>>(_: I): MsgConvertCredentialResponse {
    const message = createBaseMsgConvertCredentialResponse();
    return message;
  },
};

function createBaseVerifyIssuerProposal(): VerifyIssuerProposal {
  return { title: "", description: "", issuerAddress: "" };
}

export const VerifyIssuerProposal = {
  encode(message: VerifyIssuerProposal, writer: _m0.Writer = _m0.Writer.create()): _m0.Writer {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.issuerAddress !== "") {
      writer.uint32(26).string(message.issuerAddress);
    }
    return writer;
  },

  decode(input: _m0.Reader | Uint8Array, length?: number): VerifyIssuerProposal {
    const reader = input instanceof _m0.Reader ? input : _m0.Reader.create(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVerifyIssuerProposal();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.issuerAddress = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skipType(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VerifyIssuerProposal {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      issuerAddress: isSet(object.issuerAddress) ? globalThis.String(object.issuerAddress) : "",
    };
  },

  toJSON(message: VerifyIssuerProposal): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.issuerAddress !== "") {
      obj.issuerAddress = message.issuerAddress;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VerifyIssuerProposal>, I>>(base?: I): VerifyIssuerProposal {
    return VerifyIssuerProposal.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VerifyIssuerProposal>, I>>(object: I): VerifyIssuerProposal {
    const message = createBaseVerifyIssuerProposal();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.issuerAddress = object.issuerAddress ?? "";
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  HandleAddOperator(request: MsgAddOperator): Promise<MsgAddOperatorResponse>;
  HandleRemoveOperator(request: MsgRemoveOperator): Promise<MsgRemoveOperatorResponse>;
  HandleSetVerificationStatus(request: MsgSetVerificationStatus): Promise<MsgSetVerificationStatusResponse>;
  HandleCreateIssuer(request: MsgCreateIssuer): Promise<MsgCreateIssuerResponse>;
  HandleUpdateIssuerDetails(request: MsgUpdateIssuerDetails): Promise<MsgUpdateIssuerDetailsResponse>;
  HandleRemoveIssuer(request: MsgRemoveIssuer): Promise<MsgRemoveIssuerResponse>;
  HandleRevokeVerification(request: MsgRevokeVerification): Promise<MsgRevokeVerificationResponse>;
  HandleAttachHolderPublicKey(request: MsgAttachHolderPublicKey): Promise<MsgAttachHolderPublicKeyResponse>;
  HandleConvertCredential(request: MsgConvertCredential): Promise<MsgConvertCredentialResponse>;
}

export const MsgServiceName = "swisstronik.compliance.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.HandleAddOperator = this.HandleAddOperator.bind(this);
    this.HandleRemoveOperator = this.HandleRemoveOperator.bind(this);
    this.HandleSetVerificationStatus = this.HandleSetVerificationStatus.bind(this);
    this.HandleCreateIssuer = this.HandleCreateIssuer.bind(this);
    this.HandleUpdateIssuerDetails = this.HandleUpdateIssuerDetails.bind(this);
    this.HandleRemoveIssuer = this.HandleRemoveIssuer.bind(this);
    this.HandleRevokeVerification = this.HandleRevokeVerification.bind(this);
    this.HandleAttachHolderPublicKey = this.HandleAttachHolderPublicKey.bind(this);
    this.HandleConvertCredential = this.HandleConvertCredential.bind(this);
  }
  HandleAddOperator(request: MsgAddOperator): Promise<MsgAddOperatorResponse> {
    const data = MsgAddOperator.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleAddOperator", data);
    return promise.then((data) => MsgAddOperatorResponse.decode(_m0.Reader.create(data)));
  }

  HandleRemoveOperator(request: MsgRemoveOperator): Promise<MsgRemoveOperatorResponse> {
    const data = MsgRemoveOperator.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleRemoveOperator", data);
    return promise.then((data) => MsgRemoveOperatorResponse.decode(_m0.Reader.create(data)));
  }

  HandleSetVerificationStatus(request: MsgSetVerificationStatus): Promise<MsgSetVerificationStatusResponse> {
    const data = MsgSetVerificationStatus.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleSetVerificationStatus", data);
    return promise.then((data) => MsgSetVerificationStatusResponse.decode(_m0.Reader.create(data)));
  }

  HandleCreateIssuer(request: MsgCreateIssuer): Promise<MsgCreateIssuerResponse> {
    const data = MsgCreateIssuer.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleCreateIssuer", data);
    return promise.then((data) => MsgCreateIssuerResponse.decode(_m0.Reader.create(data)));
  }

  HandleUpdateIssuerDetails(request: MsgUpdateIssuerDetails): Promise<MsgUpdateIssuerDetailsResponse> {
    const data = MsgUpdateIssuerDetails.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleUpdateIssuerDetails", data);
    return promise.then((data) => MsgUpdateIssuerDetailsResponse.decode(_m0.Reader.create(data)));
  }

  HandleRemoveIssuer(request: MsgRemoveIssuer): Promise<MsgRemoveIssuerResponse> {
    const data = MsgRemoveIssuer.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleRemoveIssuer", data);
    return promise.then((data) => MsgRemoveIssuerResponse.decode(_m0.Reader.create(data)));
  }

  HandleRevokeVerification(request: MsgRevokeVerification): Promise<MsgRevokeVerificationResponse> {
    const data = MsgRevokeVerification.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleRevokeVerification", data);
    return promise.then((data) => MsgRevokeVerificationResponse.decode(_m0.Reader.create(data)));
  }

  HandleAttachHolderPublicKey(request: MsgAttachHolderPublicKey): Promise<MsgAttachHolderPublicKeyResponse> {
    const data = MsgAttachHolderPublicKey.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleAttachHolderPublicKey", data);
    return promise.then((data) => MsgAttachHolderPublicKeyResponse.decode(_m0.Reader.create(data)));
  }

  HandleConvertCredential(request: MsgConvertCredential): Promise<MsgConvertCredentialResponse> {
    const data = MsgConvertCredential.encode(request).finish();
    const promise = this.rpc.request(this.service, "HandleConvertCredential", data);
    return promise.then((data) => MsgConvertCredentialResponse.decode(_m0.Reader.create(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends Long ? string | number | Long : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

if (_m0.util.Long !== Long) {
  _m0.util.Long = Long as any;
  _m0.configure();
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
